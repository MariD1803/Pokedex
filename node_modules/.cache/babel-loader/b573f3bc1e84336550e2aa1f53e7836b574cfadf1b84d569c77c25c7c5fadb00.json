{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container-header\"\n};\nconst _hoisted_2 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"i\", {\n    class: \"fa-solid fa-circle-xmark close\",\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.$emit('update:modal', false))\n  }), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"img\", {\n    src: $props.pokemon.sprites.other.dream_world.front_default,\n    alt: \"img_pokemon\",\n    class: \"img\"\n  }, null, 8 /* PROPS */, _hoisted_2)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createElementVNode","onClick","_cache","$event","_ctx","$emit","_hoisted_1","src","$props","pokemon","sprites","other","dream_world","front_default","alt","_hoisted_2"],"sources":["/home/mariangel/Documents/project/prueba/src/components/CardCustom.vue"],"sourcesContent":["<template>\n  <div>\n    <i class=\"fa-solid fa-circle-xmark close\" @click=\"$emit('update:modal', false)\"></i>\n    <div class=\"container-header\">          \n      <img :src=\"pokemon.sprites.other.dream_world.front_default\" alt=\"img_pokemon\" class=\"img\">\n    </div>\n\n    \n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'CardCustom',\n  props: {        \n    pokemon: {\n      type: Object,\n      required: true\n    }   \n  },\n  data() {\n    return {\n      displayAlert: false,\n      info: [\n        { 'data': this.transformTextToUppercase(this.pokemon.name), 'label': 'Name'},\n        { 'data': this.calculateSize(this.pokemon.weight), 'label': 'Weight'},\n        { 'data': this.calculateSize(this.pokemon.height), 'label': 'Height'},\n        { 'data': this.pokemon.types.map((e) => this.transformTextToUppercase(e.type.name)).join(', '), 'label': 'Types'}\n      ]\n    }\n  },\n  methods: {\n    transformTextToUppercase(element) {\n      return element.charAt(0).toUpperCase() + element.slice(1);\n    },\n    calculateSize(e) {\n      let value = e / 10;\n      return value;\n    },\n    copyInfo() {\n      let textToCopy = this.info.map(element => `${element.label}: ${element.data}`).join(', ');\n      navigator.clipboard.writeText(textToCopy)\n        .then(() => {\n          this.displayAlert = true;\n          setTimeout(() => { \n            this.displayAlert = false\n          }, 1000); // Nota: 1000 es en milisegundos\n        })\n        .catch(err => {\n          console.log('Error copying to Clipboard', err);\n        });\n    }\n  }\n}\n</script>\n\n"],"mappings":";;EAGSA,KAAK,EAAC;AAAkB;mBAHjC;;uBACEC,mBAAA,CAOM,cANJC,mBAAA,CAAoF;IAAjFF,KAAK,EAAC,gCAAgC;IAAEG,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,KAAK;MACvDL,mBAAA,CAEM,OAFNM,UAEM,GADJN,mBAAA,CAA0F;IAApFO,GAAG,EAAEC,MAAA,CAAAC,OAAO,CAACC,OAAO,CAACC,KAAK,CAACC,WAAW,CAACC,aAAa;IAAEC,GAAG,EAAC,aAAa;IAAChB,KAAK,EAAC;0BAJ1FiB,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}