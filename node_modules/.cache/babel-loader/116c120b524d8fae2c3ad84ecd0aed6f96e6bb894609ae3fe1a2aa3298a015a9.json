{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"hello\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h1\", null, _toDisplayString(_ctx.msg), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","_ctx","msg"],"sources":["/home/mariangel/Documents/project/prueba/src/components/CardCustom.vue"],"sourcesContent":["<template>\n  <div class=\"hello\">\n    <h1>{{ msg }}</h1>\n    \n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Card',\n    props: {        \n        pokemon: {\n          type: Object,\n          required: true\n        }   \n    },\n    data() {\n        return {\n            displayAlert: false,\n            info: [{ 'data': this.transformTextToUppercase(this.pokemon.name), 'label': 'Name'}, { 'data': this.calculateSize(this.pokemon.weight), 'label': 'Weight'}, { 'data': this.calculateSize(this.pokemon.height), 'label': 'Height'}, { 'data': this.pokemon.types.map((e) => this.transformTextToUppercase(e.type.name)).join(', '), 'label': 'Types'} ]\n        }\n    },\n    methods:{\n        transformTextToUppercase(element){\n            return element.charAt(0).toUpperCase() + element.slice(1);\n        },\n        calculateSize(e){\n            let value = e / 10;\n            return value;\n        },\n        copyInfo(){\n            let textToCopy = this.info.map(element => `${element.label}: ${element.data}`).join(', ');\n            navigator.clipboard.writeText(textToCopy)\n                .then(() => {\n                    this.displayAlert = true;\n                    setTimeout(() => { \n                        this.displayAlert = false\n                    }, \"1000\");\n                })\n                .catch(err => {\n                    console.log('Error copying to Clipboard', err);\n                });\n        }\n    }\n}\n</script>\n\n\n"],"mappings":";;EACOA,KAAK,EAAC;AAAO;;uBAAlBC,mBAAA,CAGM,OAHNC,UAGM,GAFJC,mBAAA,CAAkB,YAAAC,gBAAA,CAAXC,IAAA,CAAAC,GAAG,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}